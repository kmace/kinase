#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,.std.resid) %>%
spread(key=Strain_Code, value = .std.resid) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
#apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'in') -> g
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
#network(tf_res %>% filter(abs(.std.resid)>2 & Condition == "YPD"))
ns = names(modules)
for (i in seq_along(modules)){
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
pdf(paste0(ns[[i]], '_networks.pdf'))
for (target_cond in as.character(unique(values$Condition))) {
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,.std.resid) %>%
spread(key=Strain_Code, value = .std.resid) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
#apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'in') -> g
gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
if(length(E(gsub))>0) plot(gsub, vertex.color = c('pink','white','yellow','red')[2+sign(igraph::degree(gsub,mode='out') - igraph::degree(gsub,mode='in'))],vertex.label.cex = .5, vertex.size = 5, edge.arrow.size=.3, edge.color = 'black', layout = layout_nicely(gsub, niter = 100000)*2, main=target_cond)
}
dev.off()
}
for (i in seq_along(modules)){
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
pdf(paste0(ns[[i]], '_networks.pdf'))
for (target_cond in as.character(unique(values$Condition))) {
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,.std.resid) %>%
spread(key=Strain_Code, value = .std.resid) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
if(length(E(gsub))>0) plot(gsub, vertex.color = c('pink','white','yellow','red')[2+sign(igraph::degree(gsub,mode='out') - igraph::degree(gsub,mode='in'))],vertex.label.cex = .5, vertex.size = 5, edge.arrow.size=.3, edge.color = 'black', layout = layout_nicely(gsub, niter = 100000)*2, main=target_cond)
}
dev.off()
}
resid_modules
resid_modules %>% pull(module) %>% table()
resid_modules %>% filter(module==8)
genes %>% select(data, data_aug, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==8))
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==8))
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==8)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% gggplot(aes(x=Strain_Code, y = Condition, fill = .std.Resid)) + geom_tile()
library(tidyverse)
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==8)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% gggplot(aes(x=Strain_Code, y = Condition, fill = .std.Resid)) + geom_tile()
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==8)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.Resid)) + geom_tile()
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==8)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile()
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==8)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2()
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==7)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2()
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==7)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==6)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==5)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
genes %>% select(data, data_aug, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==5))
resid_modules %>% filter(module==5)
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==4)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==3)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
std_resid_matrix
svd(std_resid_matrix)
o = svd(std_resid_matrix)
o$u
o$u %>% dim()]
o$u %>% dim()
o$u[,1] %>% hist()
o$u[,2] %>% hist()
o$u[,3] %>% hist()
o$u[,5] %>% hist()
o$u[,10] %>% hist()
o$u[,100] %>% hist()
o$u[,100] %>% outliers()
o$u[,100] %>% scores()
o$u[,100] %>% scores(p=.99)
rownames(std_resid_matrix)[o$u[,100] %>% scores(p=.99)]
rownames(std_resid_matrix)[o$u[,1] %>% scores(p=.99)]
rownames(std_resid_matrix)[o$u[,2] %>% scores(p=.99)]
rownames(std_resid_matrix)[o$u[,3] %>% scores(p=.99)]
pbcopy = function(x,sep="\t",col.names=T,...) {
write.table(x
,file = pipe("pbcopy")
,sep=sep
,col.names = col.names
,row.names = F
,quote = F,...)
}
pbpaste = function(sep="\t",header=T,...) {
read.table(pipe("pbpaste")
,sep=sep
,header=header,...)
}
rownames(std_resid_matrix)[o$u[,3] %>% scores(p=.99)]
rownames(std_resid_matrix)[o$u[,3] %>% scores(p=.99)] %>% pbcopy()
rownames(std_resid_matrix)[o$u[,1] %>% scores(p=.99)] %>% pbcopy()
rownames(std_resid_matrix)[o$u[,2] %>% scores(p=.99)] %>% pbcopy()
resid_modules %>% filter(module==5)
resid_modules %>% filter(module==5) %>% pull(name)
resid_modules %>% filter(module==5) %>% pull(name) %>% pbcopy()
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==5)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
resid_modules %>% filter(module==8) %>% pull(name) %>% pbcopy()
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==5)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==8)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
resid_modules %>% filter(module==8) %>% pull(name) %>% pbcopy()
source("https://bioconductor.org/biocLite.R")
biocLite("InterMineR")
source("https://bioconductor.org/biocLite.R")
biocLite("InterMineR")
devtools::install_github('intermine/intermineR')
genes %>% select(data, data_augment, name) %>% unnest() %>% right_join(resid_modules %>% filter(module==6)) %>% group_by(Condition, Strain_Code) %>% summarize_if(is.numeric, mean) %>% ggplot(aes(x=Strain_Code, y = Condition, fill = .std.resid)) + geom_tile() + scale_fill_gradient2() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(InterMineR)
im.yeast = initInterMine(listMines()["YeastMine"])
hsa_model = getModel(im.yeast)
subset(hsa_model, type %in% c("Gene", "Protein", "SNP") & child_name == "id")
hsa_model
colnames(hsa_model)
colnames(hsa_model)
hsa_model = getModel(im.yeast)
colnames(hsa_model)
head(has_model)
head(hsa_model)
yeast.widgets = as.data.frame(getWidgets(im.yeast))
yeast.widgets
GO_enrichResult = doEnrichment(
im = im.yeast,
genelist = exp_modules %>% filter(module==2) %>% pull(name),
# ids = hsa_gene_entrez,
widget = "go_enrichment_for_gene"
)
GO_enrichResult = doEnrichment(
im = im.yeast,
genelist = exp_modules %>% filter(module==2) %>% pull(name),
# ids = hsa_gene_entrez,
widget = "go_enrichment_for_gene"
)
?doEnrichment
exp_modules %>% filter(module==2) %>% pull(name)
GO_enrichResult = doEnrichment(
im = im.yeast,
genelist = exp_modules %>% filter(module==2) %>% pull(name),
# ids = hsa_gene_entrez,
widget = "go_enrichment_for_gene"
)
GO_enrichResult = doEnrichment(
im = im.yeast,
#genelist = exp_modules %>% filter(module==2) %>% pull(name),
# ids = hsa_gene_entrez,
widget = "go_enrichment_for_gene"
)
?getGeneIds
getGeneIds(im.yeast)
getGeneIds(im.yeast, organism = 'Saccramyces Cervisia')
getGeneIds(im.yeast, organism = 'Saccramyces Cervisia', genes = resid_modules$name)
getGeneIds(im.yeast, organism = 'Saccramyces Cervisia', genes = resid_modules$name[1:10])
exp_modules
exp_modules$module
length(exp_modules$module)
length(exp_modules$module %>% unique())
table(exp_modules$module)
exp_modules %>% filter(module==2) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==3) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==4) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==5) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==6) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==7) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==8) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==9) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==10) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==11) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==12) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==13) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==14) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==15) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==16) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==17) %>% pull(name) %>% pbcopy()
exp_modules %>% filter(module==18) %>% pull(name) %>% pbcopy()
pbpaste()
for (i in 1:18){
exp_modules %>% filter(module==i) %>% pull(name) %>% pbcopy()
invisible(readline(prompt="Press [enter] to continue"))
}
for (i in unique(resid_modules$module)){
exp_modules %>% filter(module==i) %>% pull(name) %>% write(file = paste0(i,'_module.txt')
}
for (i in unique(resid_modules$module)){
exp_modules %>% filter(module==i) %>% pull(name) %>% write(file = paste0(i,'_module.txt')
}
for (i in unique(resid_modules$module)){
exp_modules %>% filter(module==i) %>% pull(name) %>% write(file = paste0(i,'_module.txt'))
}
for (i in unique(exp_modules$module)){
exp_modules %>% filter(module==i) %>% pull(name) %>% write(file = paste0(i,'_module.txt'))
}
genes
genes$name
genes$name %>% str_extract('[A-Z]')
genes$name %>% str_extract_all('[A-Z]')
genes$name %>% str_extract('[A-Z].')
genes$name %>% str_extract('[A-Z]..')
genes$name %>% str_extract('[A-Z]*')
genes$name %>% str_extract('[A-Z]*') %>% table()
tibble(name = genes$name, module = genes$name %>% str_extract('[A-Z]*'))
tibble(name = genes$name, module = genes$name %>% str_extract('[A-Z]*')) %>% group_by(module) %>% summarize(module_size = n()) %>% ungroup() %>% filter(module_size>3)
tibble(name = genes$name, module = genes$name %>% str_extract('[A-Z]*')) %>% group_by(module) %>% mutate(module_size = n()) %>% ungroup() %>% filter(module_size>3)
?append()
append(modules, tibble(name = genes$name, module = genes$name %>% str_extract('[A-Z]*')) %>% group_by(module) %>% mutate(module_size = n()) %>% ungroup() %>% filter(module_size>3))
modules = append(modules, tibble(name = genes$name, module = genes$name %>% str_extract('[A-Z]*')) %>% group_by(module) %>% mutate(module_size = n()) %>% ungroup() %>% filter(module_size>3))
names(modules)
names(modules)[12]
names(modules)[13]
modules = modules[1:12]
modules[13] = tibble(name = genes$name, module = genes$name %>% str_extract('[A-Z]*')) %>% group_by(module) %>% mutate(module_size = n()) %>% ungroup() %>% filter(module_size>3)
length(modules)
names(modules)
names(modules)[13]
names(modules)[13] = 'gene_name_modules'
#network(tf_res %>% filter(abs(.std.resid)>2 & Condition == "YPD"))
ns = names(modules)
for (i in seq_along(modules)){
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
pdf(paste0(ns[[i]], '_networks.pdf'))
for (target_cond in as.character(unique(values$Condition))) {
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,.std.resid) %>%
spread(key=Strain_Code, value = .std.resid) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
if(length(E(gsub))>0) plot(gsub, vertex.color = c('pink','white','yellow','red')[2+sign(igraph::degree(gsub,mode='out') - igraph::degree(gsub,mode='in'))],vertex.label.cex = .5, vertex.size = 5, edge.arrow.size=.3, edge.color = 'black', layout = layout_nicely(gsub, niter = 100000)*2, main=target_cond)
}
dev.off()
}
i
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,.std.resid) %>%
spread(key=Strain_Code, value = .std.resid) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
mod
modules
modules[[13]]
modules[[14]]
modules[[13]] = tibble(name = genes$name, module = genes$name %>% str_extract('[A-Z]*')) %>% group_by(module) %>% mutate(module_size = n()) %>% ungroup() %>% filter(module_size>3)
modules[[13]]
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
pdf(paste0(ns[[i]], '_networks.pdf'))
for (target_cond in as.character(unique(values$Condition))) {
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,.std.resid) %>%
spread(key=Strain_Code, value = .std.resid) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
if(length(E(gsub))>0) plot(gsub, vertex.color = c('pink','white','yellow','red')[2+sign(igraph::degree(gsub,mode='out') - igraph::degree(gsub,mode='in'))],vertex.label.cex = .5, vertex.size = 5, edge.arrow.size=.3, edge.color = 'black', layout = layout_nicely(gsub, niter = 100000)*2, main=target_cond)
}
dev.off()
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,Expression) %>%
spread(key=Strain_Code, value = Expression) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
if(length(E(gsub))>0) plot(gsub, vertex.color = c('pink','white','yellow','red')[2+sign(igraph::degree(gsub,mode='out') - igraph::degree(gsub,mode='in'))],vertex.label.cex = .5, vertex.size = 5, edge.arrow.size=.3, edge.color = 'black', layout = layout_nicely(gsub, niter = 100000)*2, main=target_cond)
for (i in seq_along(modules)){
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
pdf(paste0(ns[[i]], '_networks.pdf'))
for (target_cond in as.character(unique(values$Condition))) {
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,Expression) %>%
spread(key=Strain_Code, value = Expression) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
if(length(E(gsub))>0) plot(gsub, vertex.color = c('pink','white','yellow','red')[2+sign(igraph::degree(gsub,mode='out') - igraph::degree(gsub,mode='in'))],vertex.label.cex = .5, vertex.size = 5, edge.arrow.size=.3, edge.color = 'black', layout = layout_nicely(gsub, niter = 100000)*2, main=target_cond)
}
dev.off()
}
yeastract_modules
yeastract_modules %>% split(.$file_name)
yeastract_modules %>% ungroup() %>% split(.$file_name)
yeastract_modules = dir(yeastract_path, pattern = 'TwoColumn') %>% as.tibble() %>% separate(value, into = c('n1','n2','Evidence_Source','n3','TF_Type','n4'), remove = F) %>% rename(file_name = value) %>% select(contains('_')) %>% mutate(file_path = file.path(yeastract_path, file_name)) %>% group_by(file_path) %>% mutate(dat = file_path %>% map(load_binary_yeastract_regulation_table)) %>% unnest() ungroup() %>% split(.$file_name)
yeastract_modules %>% ungroup() %>% split(.$file_name)
modules = yeastract_modules %>% ungroup() %>% split(.$file_name)
#network(tf_res %>% filter(abs(.std.resid)>2 & Condition == "YPD"))
ns = names(modules)
for (i in seq_along(modules)){
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
pdf(paste0(ns[[i]], '_networks.pdf'))
for (target_cond in as.character(unique(values$Condition))) {
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,Expression) %>%
spread(key=Strain_Code, value = Expression) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
if(length(E(gsub))>0) plot(gsub, vertex.color = c('pink','white','yellow','red')[2+sign(igraph::degree(gsub,mode='out') - igraph::degree(gsub,mode='in'))],vertex.label.cex = .5, vertex.size = 5, edge.arrow.size=.3, edge.color = 'black', layout = layout_nicely(gsub, niter = 100000)*2, main=target_cond)
}
dev.off()
}
for (i in seq_along(modules)){
mod = modules[[i]]
mod_res = values %>%
full_join(mod) %>%
select(Condition, name, Strain_Code, .std.resid, .fitted, Expression, module) %>%
group_by(Condition, Strain_Code, module) %>%
summarize_if(is.numeric,mean) %>%
ungroup() %>%
arrange(desc(abs(.std.resid)))
pdf(paste0(ns[[i]], '_networks.pdf'))
for (target_cond in as.character(unique(values$Condition))) {
#tf_res %>% filter(Condition == target_cond) %>% select(-Condition,-.fitted,-Expression) %>% spread(key=Strain_Code, value = .std.resid) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% t() %>% apply(2,function(x) scores(x, prob=.98)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
#tf_exp %>% filter(Condition == target_cond) %>% select(-Condition) %>% spread(key=Strain_Code, value = Exp) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('TF') %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
# gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
#segal_res %>% filter(Condition == target_cond) %>% select(-Condition,-.std.resid) %>% spread(key=Strain_Code, value = Expression) %>% na.omit() %>% remove_rownames() %>% column_to_rownames('Module Description') %>% select(-module) %>% select_if(is.numeric) %>% as.matrix() %>% apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>% apply(2,function(x) scores(x, prob=.99)) %>% igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
mod_res %>%
filter(Condition == target_cond) %>%
select(Strain_Code,module,.std.resid) %>%
spread(key=Strain_Code, value = .std.resid) %>%
na.omit() %>%
remove_rownames() %>%
column_to_rownames('module') %>%
select_if(is.numeric) %>%
as.matrix() %>%
apply(1,function(x) x - mean(x[grepl('WT',names(x))])) %>%
apply(2,function(x) scores(x, prob=.99)) %>%
igraph::graph.incidence(directed = TRUE, mode = 'out') -> g
gsub = igraph::delete.vertices(igraph::simplify(g), igraph::degree(g)==0)
if(length(E(gsub))>0) plot(gsub, vertex.color = c('pink','white','yellow','red')[2+sign(igraph::degree(gsub,mode='out') - igraph::degree(gsub,mode='in'))],vertex.label.cex = .5, vertex.size = 5, edge.arrow.size=.3, edge.color = 'black', layout = layout_nicely(gsub, niter = 100000)*2, main=target_cond)
}
dev.off()
}
View(exp_matrix)
resid_modules %>% filter(module = 8)
resid_modules
resid_modules %>% filter(module == 8)
resid_modules %>% filter(module == 8) %>% pull(name)
resid_modules %>% filter(module == 8) %>% pull(name) %>% pbcopy()
resid_modules %>% filter(module == 8) %>% pull(name) %>% pbcopy()
resid_modules %>% filter(module == 8) %>% pull(name) %>% pbcopy()
install.packages("~/Downloads/dna_0.2-1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/dna_0.2-1.tar.gz", repos = NULL, type = "source")
install.packages("dna")
library(dna)
library(dna)
savehistory("~/Thesis/kinase/src/paper/figures/figure_5/cytoscape.Rhistory")
